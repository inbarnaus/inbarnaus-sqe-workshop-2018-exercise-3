import assert from 'assert';
import {parseCode} from '../src/js/code-analyzer';

describe('The javascript parser', () => {
    it('1. just return', () => {assert.equal(JSON.stringify(parseCode('function f(x,y,z){\n' + 'let p = x;\n' + 'return c;\n' + '}', '1,2,3'),null,2), '"op0=>operation: p = x|approved \\n' +'op1=>operation: return c|approved \\n' + 'op0->op1\\n"');});
    it('2. seqDecl + ret', () => {assert.equal(JSON.stringify(parseCode('function f(x,y,z){\n' +'   if(y > 3){\n' + '      y = z + 1;\n' + '   }\n' + '   x = 0;\n' + '   return y;\n' + '}', '1,2,3'),null,2), '"op0=>condition: y > 3|approved\\n' + 'op1=>operation: y = z + 1\\n' + 'op2=>operation: x = 0|approved \\n' + 'op3=>operation: return y|approved \\n' + 'op0(yes)->op1->op2\\n' + 'op0(no)->op2\\n' + 'op2->op3\\n"');});
    it('3. varDecl + ret + ass', () => {assert.equal(JSON.stringify(parseCode('function f(x,y,z){\n' + '   if(y > 3){\n' + '      y = z + 1;\n' + '   }\n' + '   x = 0;\n' + '   return y;\n' + '}', '\'inbar\',2,3'),null,2), '"op0=>condition: y > 3|approved\\n' + 'op1=>operation: y = z + 1\\n' + 'op2=>operation: x = 0|approved \\n' + 'op3=>operation: return y|approved \\n' + 'op0(yes)->op1->op2\\n' + 'op0(no)->op2\\n' + 'op2->op3\\n"');});
    it('4. varDecl + ret + seq + update', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '    let a = x[0] + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    x[2] = b;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '    } else if (b < z * 2) {\n' + '        c = c + x[1] + 5;\n' + '    } else {\n' + '        c = c + z + 5;\n' + '    }\n' + '    \n' + '    return c;\n' + '}\n', '[1,2,3],2,3'),null,2), '"op0=>operation: a = x[0] + 1\\n' + 'b = a + y\\n' + 'c = 0\\n' + 'x[2] = b|approved \\n' + 'op1=>condition: b < z|approved\\n' + 'op2=>operation: c = c + 5\\n' + 'op3=>condition: b < z * 2|approved\\n' + 'op4=>operation: c = c + x[1] + 5|approved \\n' + 'op5=>operation: c = c + z + 5\\n' + 'op6=>operation: return c|approved \\n' + 'op0->op1\\n' + 'op1(yes)->op2\\n' + 'op1(no)->op3\\n' + 'op3(yes)->op4\\n' + 'op3(no)->op5\\n' + 'op2->op6\\n' + 'op4->op6\\n' + 'op5->op6\\n"');});
    it('5. if no else', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '    let a = x[0] + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    x[2] = b;\n' + '    \n' + '    return c;\n' + '}\n', '[1,2,3],2,3'),null,2), '"op0=>operation: a = x[0] + 1\\n' + 'b = a + y\\n' + 'c = 0\\n' + 'x[2] = b|approved \\n' + 'op1=>operation: return c|approved \\n' + 'op0->op1\\n"');});
    it('6. if + else', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '   let a = x + 1;\n' + '   let b = a + y;\n' + '   let c = 0;\n' + '   \n' + '   while (a < z) {\n' + '       c = a + b;\n' + '       z = c * 2;\n' + '       a = a + 1;\n' + '   }\n' + '   \n' + '   return z;\n' + '}\n', '3,2,1'),null,2), '"op0=>operation: a = x + 1\\n' + 'b = a + y\\n' + 'c = 0|approved \\n' + 'op1=>operation: NULL |approved\\n' + 'op2=>condition: a < z|approved \\n' + 'op3=>operation: c = a + b\\n' + 'z = c * 2\\n' + 'a = a + 1\\n' + 'op4=>operation: return z|approved \\n' + 'op0->op1->op2\\n' + 'op2(yes)->op3\\n' + 'op3->op1\\n' + 'op2(no)->op4\\n"');});
    it('7. if + else if + else', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '    } else if (b < z * 2) {\n' + '        c = c + x + 5;\n' + '    } else {\n' + '        c = c + z + 5;\n' + '    }\n' + '    \n' + '    return c;\n' + '}\n', '1,2,3'),null,2), '"op0=>operation: a = x + 1\\n' + 'b = a + y\\n' + 'c = 0|approved \\n' + 'op1=>condition: b < z|approved\\n' + 'op2=>operation: c = c + 5\\n' + 'op3=>condition: b < z * 2|approved\\n' + 'op4=>operation: c = c + x + 5|approved \\n' + 'op5=>operation: c = c + z + 5\\n' + 'op6=>operation: return c|approved \\n' + 'op0->op1\\n' + 'op1(yes)->op2\\n' + 'op1(no)->op3\\n' + 'op3(yes)->op4\\n' + 'op3(no)->op5\\n' + 'op2->op6\\n' + 'op4->op6\\n' + 'op5->op6\\n"');});
    it('8. inner if', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' +'    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '    } \n' + '    b = a+1;\n' + '    return c;\n' + '}', '1,2,3'),null,2), '"op0=>operation: a = x + 1\\n' + 'b = a + y\\n' + 'c = 0|approved \\n' + 'op1=>condition: b < z|approved\\n' + 'op2=>operation: c = c + 5\\n' + 'op3=>operation: b = a + 1|approved \\n' + 'op4=>operation: return c|approved \\n' + 'op0->op1\\n' + 'op1(yes)->op2->op3\\n' + 'op1(no)->op3\\n' + 'op3->op4\\n"');});
    it('9. inner if + else if', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '    let a = x[0] + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '    } else if (b < z * 2) {\n' + '        c = c + x[1] + 5;\n' + '    } else {\n' + '        c = c + z + 5;\n' + '    }\n' + '    \n' + '    return c;\n' + '}\n', '[1,2,3],4,5'),null,2), '"op0=>operation: a = x[0] + 1\\n' + 'b = a + y\\n' + 'c = 0|approved \\n' + 'op1=>condition: b < z|approved\\n' + 'op2=>operation: c = c + 5\\n' + 'op3=>condition: b < z * 2|approved\\n' + 'op4=>operation: c = c + x[1] + 5|approved \\n' + 'op5=>operation: c = c + z + 5\\n' + 'op6=>operation: return c|approved \\n' + 'op0->op1\\n' + 'op1(yes)->op2\\n' + 'op1(no)->op3\\n' + 'op3(yes)->op4\\n' + 'op3(no)->op5\\n' + 'op2->op6\\n' + 'op4->op6\\n' + 'op5->op6\\n"');});
    it('10. while', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '   let a = x + 1;\n' + '   let b = a + y;\n' + '   let c = 0;\n' + '   \n' + '   while (a < z) {\n' + '       c = a + b;\n' + '       z = c * 2;\n' + '       a = a + 1;\n' + '   }\n' + '   \n' + '   return z;\n' + '}\n', '1,2,3'),null,2), '"op0=>operation: a = x + 1\\n' + 'b = a + y\\n' + 'c = 0|approved \\n' + 'op1=>operation: NULL |approved\\n' + 'op2=>condition: a < z|approved \\n' + 'op3=>operation: c = a + b\\n' + 'z = c * 2\\n' + 'a = a + 1|approved \\n' + 'op4=>operation: return z|approved \\n' + 'op0->op1->op2\\n' + 'op2(yes)->op3\\n' + 'op3->op1\\n' + 'op2(no)->op4\\n"');});
    it('11. inner if', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '    } else if (b < z * 2) {\n' + '        c = c + x + 5;\n' + '    } else {\n' + '        c = c + z + 5;\n' + '    }\n' + '    \n' + '    return c;\n' + '}\n', '3,2,1'),null,2), '"op0=>operation: a = x + 1\\n' + 'b = a + y\\n' + 'c = 0|approved \\n' + 'op1=>condition: b < z|approved\\n' + 'op2=>operation: c = c + 5\\n' + 'op3=>condition: b < z * 2|approved\\n' + 'op4=>operation: c = c + x + 5\\n' + 'op5=>operation: c = c + z + 5|approved \\n' + 'op6=>operation: return c|approved \\n' + 'op0->op1\\n' + 'op1(yes)->op2\\n' + 'op1(no)->op3\\n' + 'op3(yes)->op4\\n' + 'op3(no)->op5\\n' + 'op2->op6\\n' + 'op4->op6\\n' + 'op5->op6\\n"');});
    it('12. inner if', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '    let a = z + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '\n' + '    if(x){\n' + '      c = a + b;\n' + '    }\n' + '    else{\n' + '      c = c + 5;\n' + '    }\n' + '   \n' + '    return c;\n' + '}\n', 'true,2,3'),null,2), '"op0=>operation: a = z + 1\\n' + 'b = a + y\\n' + 'c = 0|approved \\n' + 'op1=>condition: x|approved\\n' + 'op2=>operation: c = a + b|approved \\n' + 'op3=>operation: c = c + 5\\n' + 'op4=>operation: return c|approved \\n' + 'op0->op1\\n' + 'op1(yes)->op2\\n' + 'op1(no)->op3\\n' + 'op2->op4\\n' + 'op3->op4\\n"');});
    it('13. inner if', () => {assert.equal(JSON.stringify(parseCode('function foo(x, y, z){\n' + '    let a = z + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '\n' + '    if(x){\n' + '      c = a + b;\n' + '    }\n' + '    else{\n' + '      c = c + 5;\n' + '    }\n' + '   \n' + '    return c;\n' + '}\n', 'false,2,3'),null,2), '"op0=>operation: a = z + 1\\n' + 'b = a + y\\n' + 'c = 0|approved \\n' + 'op1=>condition: x|approved\\n' + 'op2=>operation: c = a + b\\n' + 'op3=>operation: c = c + 5|approved \\n' + 'op4=>operation: return c|approved \\n' + 'op0->op1\\n' + 'op1(yes)->op2\\n' + 'op1(no)->op3\\n' + 'op2->op4\\n' + 'op3->op4\\n"');});});
